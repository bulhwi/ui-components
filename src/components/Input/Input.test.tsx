import React from 'react';
import { render, screen, fireEvent } from '@testing-library/react';
import userEvent from '@testing-library/user-event';
import '@testing-library/jest-dom';
import { ThemeProvider } from 'styled-components';
import { lightTheme } from '../../styles/theme';
import { Input } from './Input';

const MockThemeProvider: React.FC<{ children: React.ReactNode }> = ({ children }) => (
  <ThemeProvider theme={lightTheme}>{children}</ThemeProvider>
);

const TestIcon = () => <span data-testid="test-icon">üîç</span>;

describe('Input', () => {
  const defaultProps = {
    placeholder: 'Test placeholder',
  };

  const renderWithTheme = (ui: React.ReactElement) => {
    return render(ui, { wrapper: MockThemeProvider });
  };

  describe('Í∏∞Î≥∏ Î†åÎçîÎßÅ', () => {
    it('Í∏∞Î≥∏Ï†ÅÏúºÎ°ú Î†åÎçîÎßÅÎêúÎã§', () => {
      renderWithTheme(<Input {...defaultProps} />);
      expect(screen.getByPlaceholderText('Test placeholder')).toBeInTheDocument();
    });

    it('ÎùºÎ≤®Ïù¥ Ïò¨Î∞îÎ•¥Í≤å ÌëúÏãúÎêúÎã§', () => {
      renderWithTheme(<Input {...defaultProps} label="Test Label" />);
      expect(screen.getByText('Test Label')).toBeInTheDocument();
    });

    it('ÌïÑÏàò ÎßàÌÅ¨Í∞Ä ÌëúÏãúÎêúÎã§', () => {
      renderWithTheme(<Input {...defaultProps} label="Test Label" required />);
      expect(screen.getByText('*')).toBeInTheDocument();
    });

    it('ÎèÑÏõÄÎßê ÌÖçÏä§Ìä∏Í∞Ä ÌëúÏãúÎêúÎã§', () => {
      renderWithTheme(<Input {...defaultProps} helperText="Helper text" />);
      expect(screen.getByText('Helper text')).toBeInTheDocument();
    });
  });

  describe('Î≥ÄÌòï(Variants)', () => {
    it('default Î≥ÄÌòïÏù¥ Ï†ÅÏö©ÎêúÎã§', () => {
      renderWithTheme(<Input {...defaultProps} variant="default" />);
      expect(screen.getByPlaceholderText('Test placeholder')).toBeInTheDocument();
    });

    it('filled Î≥ÄÌòïÏù¥ Ï†ÅÏö©ÎêúÎã§', () => {
      renderWithTheme(<Input {...defaultProps} variant="filled" />);
      expect(screen.getByPlaceholderText('Test placeholder')).toBeInTheDocument();
    });

    it('outlined Î≥ÄÌòïÏù¥ Ï†ÅÏö©ÎêúÎã§', () => {
      renderWithTheme(<Input {...defaultProps} variant="outlined" />);
      expect(screen.getByPlaceholderText('Test placeholder')).toBeInTheDocument();
    });
  });

  describe('ÌÅ¨Í∏∞(Sizes)', () => {
    it('small ÌÅ¨Í∏∞Í∞Ä Ï†ÅÏö©ÎêúÎã§', () => {
      renderWithTheme(<Input {...defaultProps} size="small" />);
      expect(screen.getByPlaceholderText('Test placeholder')).toBeInTheDocument();
    });

    it('medium ÌÅ¨Í∏∞Í∞Ä Ï†ÅÏö©ÎêúÎã§', () => {
      renderWithTheme(<Input {...defaultProps} size="medium" />);
      expect(screen.getByPlaceholderText('Test placeholder')).toBeInTheDocument();
    });

    it('large ÌÅ¨Í∏∞Í∞Ä Ï†ÅÏö©ÎêúÎã§', () => {
      renderWithTheme(<Input {...defaultProps} size="large" />);
      expect(screen.getByPlaceholderText('Test placeholder')).toBeInTheDocument();
    });
  });

  describe('ÌÉÄÏûÖ(Types)', () => {
    it('text ÌÉÄÏûÖÏù¥ Ï†ÅÏö©ÎêúÎã§', () => {
      renderWithTheme(<Input {...defaultProps} type="text" />);
      expect(screen.getByPlaceholderText('Test placeholder')).toHaveAttribute('type', 'text');
    });

    it('email ÌÉÄÏûÖÏù¥ Ï†ÅÏö©ÎêúÎã§', () => {
      renderWithTheme(<Input {...defaultProps} type="email" />);
      expect(screen.getByPlaceholderText('Test placeholder')).toHaveAttribute('type', 'email');
    });

    it('password ÌÉÄÏûÖÏù¥ Ï†ÅÏö©ÎêúÎã§', () => {
      renderWithTheme(<Input {...defaultProps} type="password" />);
      expect(screen.getByPlaceholderText('Test placeholder')).toHaveAttribute('type', 'password');
    });

    it('number ÌÉÄÏûÖÏù¥ Ï†ÅÏö©ÎêúÎã§', () => {
      renderWithTheme(<Input {...defaultProps} type="number" />);
      expect(screen.getByPlaceholderText('Test placeholder')).toHaveAttribute('type', 'number');
    });
  });

  describe('ÏÉÅÌÉú Í¥ÄÎ¶¨', () => {
    it('ÎπÑÌôúÏÑ±Ìôî ÏÉÅÌÉúÍ∞Ä Ï†ÅÏö©ÎêúÎã§', () => {
      renderWithTheme(<Input {...defaultProps} disabled />);
      expect(screen.getByPlaceholderText('Test placeholder')).toBeDisabled();
    });

    it('ÏóêÎü¨ ÏÉÅÌÉúÏóêÏÑú ÏóêÎü¨ Î©îÏãúÏßÄÍ∞Ä ÌëúÏãúÎêúÎã§', () => {
      renderWithTheme(
        <Input {...defaultProps} error errorMessage="Error message" helperText="Helper text" />
      );
      expect(screen.getByText('Error message')).toBeInTheDocument();
      expect(screen.queryByText('Helper text')).not.toBeInTheDocument();
    });

    it('required ÏÜçÏÑ±Ïù¥ Ï†ÅÏö©ÎêúÎã§', () => {
      renderWithTheme(<Input {...defaultProps} required />);
      expect(screen.getByPlaceholderText('Test placeholder')).toBeRequired();
    });

    it('fullWidth ÏÜçÏÑ±Ïù¥ Ï†ÅÏö©ÎêúÎã§', () => {
      renderWithTheme(<Input {...defaultProps} fullWidth />);
      expect(screen.getByPlaceholderText('Test placeholder')).toBeInTheDocument();
    });
  });

  describe('ÏïÑÏù¥ÏΩò Í∏∞Îä•', () => {
    it('ÏôºÏ™Ω ÏïÑÏù¥ÏΩòÏù¥ ÌëúÏãúÎêúÎã§', () => {
      renderWithTheme(<Input {...defaultProps} leftIcon={<TestIcon />} />);
      expect(screen.getByTestId('test-icon')).toBeInTheDocument();
    });

    it('Ïò§Î•∏Ï™Ω ÏïÑÏù¥ÏΩòÏù¥ ÌëúÏãúÎêúÎã§', () => {
      renderWithTheme(<Input {...defaultProps} rightIcon={<TestIcon />} />);
      expect(screen.getByTestId('test-icon')).toBeInTheDocument();
    });

    it('ÏïÑÏù¥ÏΩò ÌÅ¥Î¶≠ Ïù¥Î≤§Ìä∏Í∞Ä Î∞úÏÉùÌïúÎã§', () => {
      const handleIconClick = jest.fn();
      renderWithTheme(
        <Input {...defaultProps} leftIcon={<TestIcon />} onIconClick={handleIconClick} />
      );
      
      fireEvent.click(screen.getByTestId('test-icon'));
      expect(handleIconClick).toHaveBeenCalledWith('left');
    });

    it('ÎπÑÌôúÏÑ±Ìôî ÏÉÅÌÉúÏóêÏÑú ÏïÑÏù¥ÏΩò ÌÅ¥Î¶≠Ïù¥ ÏûëÎèôÌïòÏßÄ ÏïäÎäîÎã§', () => {
      const handleIconClick = jest.fn();
      renderWithTheme(
        <Input {...defaultProps} leftIcon={<TestIcon />} onIconClick={handleIconClick} disabled />
      );
      
      fireEvent.click(screen.getByTestId('test-icon'));
      expect(handleIconClick).not.toHaveBeenCalled();
    });
  });

  describe('ÏÇ¨Ïö©Ïûê ÏÉÅÌò∏ÏûëÏö©', () => {
    it('ÌÖçÏä§Ìä∏ ÏûÖÎ†•Ïù¥ Í∞ÄÎä•ÌïòÎã§', async () => {
      const user = userEvent.setup();
      renderWithTheme(<Input {...defaultProps} />);
      
      const input = screen.getByPlaceholderText('Test placeholder');
      await user.type(input, 'Hello World');
      
      expect(input).toHaveValue('Hello World');
    });

    it('onChange Ïù¥Î≤§Ìä∏Í∞Ä Î∞úÏÉùÌïúÎã§', async () => {
      const handleChange = jest.fn();
      const user = userEvent.setup();
      renderWithTheme(<Input {...defaultProps} onChange={handleChange} />);
      
      const input = screen.getByPlaceholderText('Test placeholder');
      await user.type(input, 'H');
      
      expect(handleChange).toHaveBeenCalled();
    });

    it('onFocus Ïù¥Î≤§Ìä∏Í∞Ä Î∞úÏÉùÌïúÎã§', () => {
      const handleFocus = jest.fn();
      renderWithTheme(<Input {...defaultProps} onFocus={handleFocus} />);
      
      const input = screen.getByPlaceholderText('Test placeholder');
      fireEvent.focus(input);
      
      expect(handleFocus).toHaveBeenCalled();
    });

    it('onBlur Ïù¥Î≤§Ìä∏Í∞Ä Î∞úÏÉùÌïúÎã§', () => {
      const handleBlur = jest.fn();
      renderWithTheme(<Input {...defaultProps} onBlur={handleBlur} />);
      
      const input = screen.getByPlaceholderText('Test placeholder');
      fireEvent.focus(input);
      fireEvent.blur(input);
      
      expect(handleBlur).toHaveBeenCalled();
    });
  });

  describe('Ï†ëÍ∑ºÏÑ±', () => {
    it('ÎùºÎ≤®Ïù¥ ÏûÖÎ†• ÌïÑÎìúÏôÄ Ïò¨Î∞îÎ•¥Í≤å Ïó∞Í≤∞ÎêúÎã§', () => {
      renderWithTheme(<Input {...defaultProps} label="Test Label" id="test-input" />);
      
      const label = screen.getByText('Test Label');
      const input = screen.getByPlaceholderText('Test placeholder');
      
      expect(label).toHaveAttribute('for', 'test-input');
      expect(input).toHaveAttribute('id', 'test-input');
    });

    it('ÏûêÎèô ÏÉùÏÑ±Îêú IDÍ∞Ä ÏÇ¨Ïö©ÎêúÎã§', () => {
      renderWithTheme(<Input {...defaultProps} label="Test Label" />);
      
      const input = screen.getByPlaceholderText('Test placeholder');
      const id = input.getAttribute('id');
      
      expect(id).toMatch(/^input-/);
    });

    it('aria ÏÜçÏÑ±Ïù¥ Ïò¨Î∞îÎ•¥Í≤å ÏÑ§Ï†ïÎêúÎã§', () => {
      renderWithTheme(<Input {...defaultProps} required />);
      
      const input = screen.getByPlaceholderText('Test placeholder');
      expect(input).toBeRequired();
    });
  });

  describe('forwardRef', () => {
    it('refÍ∞Ä Ïò¨Î∞îÎ•¥Í≤å Ï†ÑÎã¨ÎêúÎã§', () => {
      const ref = React.createRef<HTMLInputElement>();
      renderWithTheme(<Input {...defaultProps} ref={ref} />);
      
      expect(ref.current).toBeInstanceOf(HTMLInputElement);
    });

    it('refÎ•º ÌÜµÌï¥ ÏûÖÎ†• ÌïÑÎìúÏóê Ìè¨Ïª§Ïä§Ìï† Ïàò ÏûàÎã§', () => {
      const ref = React.createRef<HTMLInputElement>();
      renderWithTheme(<Input {...defaultProps} ref={ref} />);
      
      ref.current?.focus();
      expect(ref.current).toHaveFocus();
    });
  });
});